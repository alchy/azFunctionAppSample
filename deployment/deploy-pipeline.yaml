trigger:
- master

variables:
  azureSubscription: 'ServiceConnectionForPythonPipeline'
  functionAppName: 'functionAppHelloPotato'
  vmImageName: 'ubuntu-latest'
  workingDirectory: './'
  PYTHON_VERSION: '3.10.16'  
  PYTHON_MAJOR: '3'
  PYTHON_INSTALL_DIR: '$(Agent.ToolsDirectory)/Python/$(PYTHON_VERSION)/x64'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      name: SelfHostedPool

    steps:
    - checkout: self
      displayName: 'Checkout code from repository'

    - bash: |
        echo "Agent Tools Directory: $(Agent.ToolsDirectory)"
        echo "Working Directory: $(workingDirectory)"
        echo "Python Install Directory: $(PYTHON_INSTALL_DIR)"
        echo "Current directory content:"
        ls -la
      displayName: 'Debug: Initial environment info'

    - bash: |
        echo "Checking Python installation"
        echo "Python Install Directory: $(PYTHON_INSTALL_DIR)"
        ls -la $(PYTHON_INSTALL_DIR)/bin
        echo "Python version:"
        $(PYTHON_INSTALL_DIR)/bin/python3 --version
        echo "Pip version:"
        $(PYTHON_INSTALL_DIR)/bin/pip3 --version
      displayName: 'Debug: Check Python installation'

    - bash: |
        echo "Python version in use:"
        $(PYTHON_INSTALL_DIR)/bin/python3 --version
        $(PYTHON_INSTALL_DIR)/bin/python3 -m venv antenv
        source antenv/bin/activate
        $(PYTHON_INSTALL_DIR)/bin/python3 -m pip install --upgrade pip
        $(PYTHON_INSTALL_DIR)/bin/pip3 install -r requirements.txt --target="./.python_packages/lib/site-packages"
        echo "Listing installed packages:"
        $(PYTHON_INSTALL_DIR)/bin/pip3 list
      workingDirectory: $(workingDirectory)
      displayName: 'Install application dependencies'

    - bash: |
        echo "Listing Python packages directory:"
        ls -la $(workingDirectory)/.python_packages/lib/site-packages
      displayName: 'Debug: List Python packages'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(workingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - bash: |
        echo "Checking archived file:"
        ls -la $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip || echo "ZIP file not found"
      displayName: 'Debug: Check archived ZIP'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      name: SelfHostedPool

    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              echo "Testing Azure AD connectivity"
              curl -I https://login.microsoftonline.com || echo "Failed to reach Azure AD"
              echo "Testing Azure DevOps connectivity"
              curl -I https://dev.azure.com/jindrichnemec || echo "Failed to reach Azure DevOps"
              echo "Service connection details:"
              echo "Subscription ID: $(azureSubscription)"
              echo "Function App Name: $(functionAppName)"
              echo "Package path: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip"
              ls -la $(Pipeline.Workspace)/drop/$(Build.BuildId).zip || echo "Package not found"
            displayName: 'Debug: Pre-deploy check'

          - task: AzureCLI@2
            displayName: 'Deploy Function App (Azure CLI)'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                RESOURCE_GROUP="rg-azfunction" # Nahraďte skutečným názvem skupiny prostředků
                az functionapp deployment source config-zip \
                  --resource-group $RESOURCE_GROUP \
                  --name $(functionAppName) \
                  --src $(Pipeline.Workspace)/drop/$(Build.BuildId).zip

          - task: AzureCLI@2
            displayName: 'Get Function App URL'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                RESOURCE_GROUP="rg-azfunction" # Nahraďte skutečným názvem skupiny prostředků
                FUNCTION_APP_URL=$(az functionapp show --resource-group $RESOURCE_GROUP --name $(functionAppName) --query defaultHostName -o tsv)
                echo "Function App URL: https://$FUNCTION_APP_URL"
                echo "##vso[task.setvariable variable=FUNCTION_APP_URL;isOutput=true]https://$FUNCTION_APP_URL"
            name: GetFunctionAppUrl # Pojmenování tasku, abychom mohli získat výstupní proměnnou

          - bash: |
              echo "Function App URL from variable: $(GetFunctionAppUrl.FUNCTION_APP_URL)"
            displayName: 'Display Function App URL'

  
